name: BabyDoge Playwright Tests

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  # schedule:             /// запуск по времени
  #   - cron: '0 1 * * *' 
  

jobs:
  Test_buy_use_boosters:
    runs-on: ubuntu-latest
    services:
      # Определяем Docker-сервис для браузера
      browser:
        image: selenium/standalone-chrome:latest
        options: --network-alias browser
        ports:
          - 4444:4444  # Порт для доступа к браузеру

    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    # Установка Playwright и зависимостей
    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install

    # Установка xvfb
    - name: Install xvfb
      run: sudo apt-get install -y xvfb

    # Создание файла loginAuth.json из секретов
    - name: Create loginAuth.json from secret
      run: |
        echo '${{ secrets.LOGIN_AUTH_JSON }}' > LoginAuth2.json

    # Установка Serveo и запуск туннеля
    - name: Start Serveo Tunnel
      run: |
        ssh -o StrictHostKeyChecking=no -R 80:localhost:4444 serveo.net > serveo_url.txt & 
        sleep 5
        LT_URL=$(grep -o 'https://[a-zA-Z0-9]*\.serveo\.net' serveo_url.txt)
        echo "LT_URL=$LT_URL" >> $GITHUB_ENV

    # Запуск тестов в режиме headed с использованием xvfb
    - name: Run Playwright tests in headful mode
      run: |
        echo "Access the browser at: $LT_URL"
        xvfb-run -a npx playwright test -g "Buy Multitap" --headed --reporter=line,html

    # Копирование отчета в папку public
    - name: Copy Playwright report to a separate folder
      if: ${{ always() }}
      run: |
        mkdir -p public
        cp -r playwright-report/* public/

    # Развертывание отчета в GitHub Pages
    - name: Deploy report to GitHub Pages
      if: ${{ always() }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public

    # Печать ссылки на отчет
    - name: Print report URL
      if: ${{ always() }}
      run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}/"
          echo "Before changes:"
          cat README.md
            FIRST_LINE="<strong>[HTML Report](${REPORT_URL})</strong>"
            REST_OF_FILE=$(tail -n +2 README.md)  # Получаем всё кроме первой строки
            echo -e "$FIRST_LINE\n$REST_OF_FILE" > README.md
          echo "After changes:"
          cat README.md
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Update README with latest HTML report link" || echo "No changes to commit"
          git push || echo "Nothing to push"

  # Test_buy_use_cards:
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}
  #   needs: Test_buy_use_boosters
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: actions/setup-node@v4
  #     with:
  #       node-version: lts/*
  #   - uses: microsoft/playwright-github-action@v1

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Install Playwright
  #     run: npx playwright install

  #   - name: Install Playwright Chrome dependencies
  #     run: npx playwright install chrome

  #   - name: Create loginAuth.json from secret
  #     run: |
  #       echo '${{ secrets.LOGIN_AUTH_JSON }}' > LoginAuth2.json

  #   - name: Run Playwright tests with Allure report
  #     run: npx playwright test buyCards.spec.ts --reporter=line,html

  #   - name: Upload Playwright report
  #     if: ${{ always() }}
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: playwright-report-cards
  #       path: playwright-report/
  #       retention-days: 10

  # Test_visibility_cards:
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}
  #   needs: Test_buy_use_cards
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: actions/setup-node@v4
  #     with:
  #       node-version: lts/*
  #   - uses: microsoft/playwright-github-action@v1

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Install Playwright
  #     run: npx playwright install

  #   - name: Install Playwright Chrome dependencies
  #     run: npx playwright install chrome

  #   - name: Create loginAuth.json from secret
  #     run: |
  #       echo '${{ secrets.LOGIN_AUTH_JSON }}' > LoginAuth2.json

  #   - name: Run Playwright tests with Allure report
  #     run: npx playwright test cards.spec.ts --reporter=line,html

  #   - name: Upload Playwright report
  #     if: ${{ always() }}
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: playwright-report-visibility
  #       path: playwright-report/
  #       retention-days: 10

  # Generate_final_report:
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}
  #   needs:
  #     - Test_buy_use_boosters
  #     - Test_buy_use_cards
  #     - Test_visibility_cards
  #   steps:
  #   - name: Download Playwright reports from all jobs
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: playwright-report-boosters
  #       path: ./playwright-reports/boosters

  #   - name: Download Playwright reports from all jobs
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: playwright-report-cards
  #       path: ./playwright-reports/cards

  #   - name: Download Playwright reports from all jobs
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: playwright-report-visibility
  #       path: ./playwright-reports/visibility

  #   - name: Merge reports
  #     run: |
  #       mkdir -p playwright-report
  #       cp -r ./playwright-reports/boosters/* playwright-report/
  #       cp -r ./playwright-reports/cards/* playwright-report/
  #       cp -r ./playwright-reports/visibility/* playwright-report/

  #   - name: Output link to Playwright report
  #     run: |
  #       echo "Playwright Report URL: ${{ github.server_url }}/${{ github.repository }}/actions/artifacts"